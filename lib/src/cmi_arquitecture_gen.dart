import 'dart:io';

import 'package:arquitecture_cmi_generators/src/file_gen.dart';

class CmiArchitectureGen {
  Future<void> generate() async {
    //paths
    final String lib = 'lib';
    final String config = '$lib/config';
    final String core = '$lib/core';
    final String core_domain = '$core/domain';
    final String core_implementation = '$core/implementation';
    final String state_management = '$lib/state_management';
    final String ui = '$lib/ui';
    final String screens = "$ui/screens";
    final String views = "$ui/views";
    final String components = "$ui/components";
    final String components_delegates = "$components/delegates";
    final String components_shared = "$components/shared";
    final String BarrelFileContent = """
// This file was generated by a generator for the CMI architecture.

// This is a barrel file used to manage imports.
//Example:
// export 'book/book_creen.dart';
// export 'book/booklist_view.dart';
// export 'core/**.dart';
//...

// Do not delete this file.
""";

    // Config
    await Directory('$config/constants').create(recursive: true);
    await Directory('$config/theme').create(recursive: true);
    await Directory('$config/router').create(recursive: true);
    await Directory('$config/helpers').create(recursive: true);
    await Directory('$config/colors').create(recursive: true);
    await Directory('$config/notifications').create(recursive: true);
    await Directory('$config/languages').create(recursive: true);
    await Directory('$config/types').create(recursive: true);
    await generateFile(
        path: '$config',
        fileName: 'config.dart',
        fileContent: BarrelFileContent);

    // Core
    await Directory('$core_domain/datasources').create(recursive: true);
    await Directory('$core_domain/entities').create(recursive: true);
    await Directory('$core_domain/repositories').create(recursive: true);
    await Directory('$core_implementation/datasources').create(recursive: true);
    await Directory('$core_implementation/models').create(recursive: true);
    await Directory('$core_implementation/adapters').create(recursive: true);
    await Directory('$core_implementation/repositories')
        .create(recursive: true);
    await generateFile(
        path: '$core', fileName: 'core.dart', fileContent: BarrelFileContent);

    // State Management
    await Directory('$state_management').create(recursive: true);

    await generateFile(
        path: '$state_management',
        fileName: 'state_management.dart',
        fileContent: BarrelFileContent);

    // User Interface (UI)
    await Directory('$screens').create(recursive: true);
    await Directory('$views').create(recursive: true);
    await Directory('$components').create(recursive: true);
    await Directory('$components_delegates').create(recursive: true);
    await Directory('$components_shared').create(recursive: true);
    await generateFile(
        path: '$screens', fileName: 'ui.dart', fileContent: BarrelFileContent);
    await generateFile(
        path: '$views', fileName: 'ui.dart', fileContent: BarrelFileContent);
    await generateFile(
        path: '$components',
        fileName: 'ui.dart',
        fileContent: BarrelFileContent);

    //generator results file
    final String resultsFileContent = """
// This file was generated by a generator for the CMI architecture.

// Modifications:
// Rename the "state_management" layer and the "state_management.dart" barrel file to whatever state management you use, for example 'block'. 'riverpod', 'provider', 'getx', among others.
// Rename "screens" to "pages", if you are going to use this project on the web.

//Reminder:
// The modules of the config layer are examples, if they are not the ones you need, you are free to eliminate them or add others.

// Delete this file if you don't want it.
// For suggestions, make a request on github.
// Share, like and follow https://github.com/UTOQINGAPP/Arquitectura-CMI.git

""";
    await generateFile(
        path: '$lib',
        fileName: 'result_arquitecture_cmi_generators.dart',
        fileContent: resultsFileContent);
  }
}
