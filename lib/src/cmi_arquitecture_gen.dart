import 'dart:io';

import 'package:arquitecture_cmi_generators/src/file_gen.dart';
import 'package:arquitecture_cmi_generators/src/package_data.dart';
//generators

class CmiArchitectureGen {
  
  Future<void> generate() async {
    const String BarrelFileContent = """
// This file was generated by a generator for the CMI architecture.

// This is a barrel file used to manage imports.
//Example:
// export 'book/book_creen.dart';
// export 'book/booklist_view.dart';
// export 'core/**.dart';
//...

// Do not delete this file.
""";
const String contentApp="""
import 'package:flutter/material.dart';

class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Material App',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Material App Bar'),
        ),
        body: const Center(
          child: Text('Hello World'),
        ),
      ),
    );
  }
}
""";
    //Origin Lib
    //final String lib = 'lib';
    final Directory lib= await Directory('lib').create(recursive: true);
    // Generate Configs enruter
    await generateFile(
        path: lib.path,
        fileName: 'lib.dart',
        fileContent: "export 'ui/ui.dart';");
    //Layer-Configs

    final Directory layerConfigs= await Directory('${lib.path}/configs').create(recursive: true);
    // Generate Configs enruter
    await generateFile(
        path: layerConfigs.path,
        fileName: 'configs.dart',
        fileContent: BarrelFileContent);
    //Configs-modules
    final Directory configsConstants= await Directory('${layerConfigs.path}/constants').create(recursive: true);
    final Directory configsTheme= await Directory('${layerConfigs.path}/theme').create(recursive: true);
    final Directory configsRouter= await Directory('${layerConfigs.path}/router').create(recursive: true);
    final Directory configsHelpers= await Directory('${layerConfigs.path}/helpers').create(recursive: true);
    final Directory configsColors= await Directory('${layerConfigs.path}/colors').create(recursive: true);
    final Directory configsNotifications= await Directory('${layerConfigs.path}/notifications').create(recursive: true);
    final Directory configsLanguages= await Directory('${layerConfigs.path}/languages').create(recursive: true);
    final Directory configsTypes= await Directory('${layerConfigs.path}/types').create(recursive: true);
    //Configs-modules-enruter
    await generateFile(
        path: configsConstants.path,
        fileName: 'constants_configs.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: configsTheme.path,
        fileName: 'theme_configs.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: configsRouter.path,
        fileName: 'router_configs.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: configsHelpers.path,
        fileName: 'helpers_configs.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: configsColors.path,
        fileName: 'colors_configs.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: configsNotifications.path,
        fileName: 'notifications_configs.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: configsLanguages.path,
        fileName: 'Languages_configs.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: configsTypes.path,
        fileName: 'types_configs.dart',
        fileContent: BarrelFileContent);


    //Layer-Core
    final Directory layerCore= await Directory('${lib.path}/core').create(recursive: true);

    // Generate Core enruter
    await generateFile(
        path: layerCore.path,
        fileName: 'core.dart',
        fileContent: BarrelFileContent);
    //Core-modules
    final Directory coreRules= await Directory('${layerCore.path}/rules').create(recursive: true);
    final Directory coreUses= await Directory('${layerCore.path}/uses').create(recursive: true);
    //Core-modules-enruter
     await generateFile(
        path: coreRules.path,
        fileName: 'rules_core.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: coreUses.path,
        fileName: 'uses_core.dart',
        fileContent: BarrelFileContent);
    //Core-modules-container(s)
    // Core-module-rules-container(s)
    final Directory coreRulesData= await Directory('${coreRules.path}/data').create(recursive: true);
    final Directory coreRulesServices= await Directory('${coreRules.path}/services').create(recursive: true);
    final Directory coreRulesConsumers= await Directory('${coreRules.path}/consumers').create(recursive: true);
    //Core-module-rules-container(s)-enruter
    await generateFile(
        path: coreRulesData.path,
        fileName: 'data_rules.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: coreRulesServices.path,
        fileName: 'services_rules.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: coreRulesConsumers.path,
        fileName: 'consumers_rules.dart',
        fileContent: BarrelFileContent);
    // Core-module-uses-container(s)
    final Directory coreUsesAdapters= await Directory('${coreUses.path}/adapters').create(recursive: true);
    final Directory coreUsesServices= await Directory('${coreUses.path}/services').create(recursive: true);
    final Directory coreUsesOrigins= await Directory('${coreUses.path}/origins').create(recursive: true);
    final Directory coreUsesConsumers= await Directory('${coreUses.path}/consumers').create(recursive: true);
    //Core-module-uses-container(s)-enruter
    await generateFile(
        path: coreUsesAdapters.path,
        fileName: 'adapters_uses.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: coreUsesServices.path,
        fileName: 'services_uses.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: coreUsesOrigins.path,
        fileName: 'origins_uses.dart',
        fileContent: BarrelFileContent);
        await generateFile(
        path: coreUsesConsumers.path,
        fileName: 'consumers_uses.dart',
        fileContent: BarrelFileContent);





    //Layer-UI
    final Directory layerUI= await Directory('${lib.path}/ui').create(recursive: true);
    // Generate UI enruter
    await generateFile(
        path: layerUI.path,
        fileName: 'ui.dart',
        fileContent: "export 'app/app.dart';");
    //UI-modules
    final Directory uiApp= await Directory('${layerUI.path}/app').create(recursive: true);
    final Directory uiPages= await Directory('${layerUI.path}/pages').create(recursive: true);
    final Directory uiLayouts= await Directory('${layerUI.path}/layouts').create(recursive: true);
    final Directory uiShared= await Directory('${layerUI.path}/shared').create(recursive: true);
    //Configs-modules-enruter
    await generateFile(
        path: uiApp.path,
        fileName: 'app.dart',
        fileContent: contentApp);
        await generateFile(
        path: uiPages.path,
        fileName: 'pages.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: uiLayouts.path,
        fileName: 'layouts.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: uiShared.path,
        fileName: 'shared.dart',
        fileContent: BarrelFileContent);
    // UI-module-Layouts-shared-container(s)
    final Directory uiSharedComponents= await Directory('${uiShared.path}/components').create(recursive: true);
    final Directory uiSharedDialogs= await Directory('${uiShared.path}/dialogs').create(recursive: true);
    final Directory uiSharedLogic= await Directory('${uiShared.path}/logic').create(recursive: true);
    final Directory uiSharedNotifications= await Directory('${uiShared.path}/notifications').create(recursive: true);
    // UI-module-Layouts-shared-container(s)-enruter
    await generateFile(
        path: uiSharedComponents.path,
        fileName: 'components_shared.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: uiSharedDialogs.path,
        fileName: 'dialogs_shared.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: uiSharedLogic.path,
        fileName: 'logic_shared.dart',
        fileContent: BarrelFileContent);
    await generateFile(
        path: uiSharedNotifications.path,
        fileName: 'notifications_shared.dart',
        fileContent: BarrelFileContent);

//Edit main
final String contentMain="""
import 'package:flutter/material.dart';
import 'ui/ui.dart';
void main() => runApp(const App());
""";
await generateFile(
        path:lib.path,
        fileName: 'main.dart',
        fileContent: contentMain);
final String contentTest="""
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:${getProjectName()??'namePackage'}/lib.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const App());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}

""";
        await generateFile(
        path: 'test',
        fileName: 'widget_test.dart',
        fileContent: contentTest);
    //generator results file
    final String resultsFileContent = """
// This file was generated by a generator for the CMI architecture.
// Delete this file if you don't want it.
// For suggestions, make a request on github.
// Share, like and follow https://github.com/UTOQINGAPP/Arquitectura-CMI.git

""";
    await generateFile(
        path: '${lib.path}',
        fileName: 'result_arquitecture_cmi_generators.dart',
        fileContent: resultsFileContent);
  }
}
